#!/bin/bash

# Configurações

# Variáveis de controle
EMAIL_DESTINO="antonio.tedim@gmail.com"
notifica="sim"

ARQUIVO_HOSTS="/etc/scripts/zz_mon_hosts.txt"
NUM_TENTATIVAS=3
INTERVALO=2
ARQUIVO_SAIDA="/etc/scripts/zz_mon_result.txt"
PERCENTUAL_FALHA_CRITICO=70
ARQUIVO_LOG_MUDANCA="zz_mon_disp.log"
DIRETORIO_ESTADOS="./estados"
MODO_SILENCIOSO=0

# Verifica argumentos
for arg in "$@"; do
    case "$arg" in
        -s|--silent)
            MODO_SILENCIOSO=1
            ;;
        -h|--help)
            echo "Uso: $0 [-s|--silent]"
            echo "  -s, --silent   Executa em modo silencioso (sem saída no terminal)"
            exit 0
            ;;
        *)
            echo "Parâmetro inválido: $arg"
            echo "Use -h para ajuda."
            exit 1
            ;;
    esac
done

# Limpa saída anterior
rm -f saida_*.txt "$ARQUIVO_SAIDA"

# Garante que diretório de estados exista
mkdir -p "$DIRETORIO_ESTADOS"

# Verifica se o arquivo de hosts existe
if [ ! -f "$ARQUIVO_HOSTS" ]; then
    echo "Arquivo $ARQUIVO_HOSTS não encontrado!"
    exit 1
fi

# Função para monitorar um host
monitorar_host() {
    local HOSTNAME="$1"
    local IP="$2"
    local SAIDA_TMP="saida_${HOSTNAME}.txt"
    local ESTADO_ARQUIVO="$DIRETORIO_ESTADOS/estado_${HOSTNAME}.status"
    local FALHAS=0
    local HORARIO_INICIO=""
    local HORARIO_FIM=""
    local NOVO_ESTADO=""
    local RESULT=()

    {
        echo "===== Monitorando $HOSTNAME ($IP) ====="

        # Registra horário de início antes da primeira tentativa
        HORARIO_INICIO=$(date +"%H:%M:%S")

        # Realiza as tentativas de ping
        for (( i=0; i<NUM_TENTATIVAS; i++ )); do
            HORA=$(date +"%H:%M:%S")

            # Registra horário final na última tentativa
            [[ "$i" -eq $((NUM_TENTATIVAS-1)) ]] && HORARIO_FIM="$HORA"

            if ping -c 1 -W 1 "$IP" > /dev/null 2>&1; then
                RESULT[$i]="OK"
            else
                RESULT[$i]="FALHA"
                ((FALHAS++))
            fi

            # Não espera após a última tentativa
            [[ "$i" -lt $((NUM_TENTATIVAS-1)) ]] && sleep "$INTERVALO"
        done

        # Calcula percentual de falha
        local PERCENTUAL_FALHA=$((100 * FALHAS / NUM_TENTATIVAS))

        # Determina o novo estado
        if [ "$FALHAS" -eq 0 ]; then
            echo "Todas as tentativas iniciadas em $HORARIO_INICIO e finalizadas em $HORARIO_FIM: OK"
            NOVO_ESTADO="OK"
        elif [ "$FALHAS" -eq "$NUM_TENTATIVAS" ]; then
            echo "Todas as tentativas iniciadas em $HORARIO_INICIO e finalizadas em $HORARIO_FIM: FALHA"
            echo "Resumo: $HOSTNAME teve 100% de falhas ($FALHAS de $NUM_TENTATIVAS)"
            NOVO_ESTADO="FALHA"
        else
            # Mostra cada tentativa individual
            for (( i=0; i<NUM_TENTATIVAS; i++ )); do
                echo "Tentativa $((i+1)) [${HORARIO_INICIO}-${HORARIO_FIM}]: ${RESULT[$i]}"
            done

            # Determina estado com base no percentual crítico
            if [ "$PERCENTUAL_FALHA" -gt "$PERCENTUAL_FALHA_CRITICO" ]; then
                echo ">>> ALERTA: $HOSTNAME teve $PERCENTUAL_FALHA% de falhas ($FALHAS de $NUM_TENTATIVAS)"
                NOVO_ESTADO="FALHA"
            else
                echo "Resumo: $HOSTNAME teve $PERCENTUAL_FALHA% de falhas ($FALHAS de $NUM_TENTATIVAS)"
                NOVO_ESTADO="OK"
            fi
        fi

        echo ""

        # Verifica o estado anterior
        local ESTADO_ANTERIOR="DESCONHECIDO"
        if [ -f "$ESTADO_ARQUIVO" ]; then
            ESTADO_ANTERIOR=$(cat "$ESTADO_ARQUIVO")
        fi

        # Registra o novo estado
        echo "$NOVO_ESTADO" > "$ESTADO_ARQUIVO"

        # Verifica se houve mudança de estado e notifica se necessário
        if [ "$ESTADO_ANTERIOR" != "$NOVO_ESTADO" ]; then
            TIMESTAMP=$(date +"%Y-%m-%d %H:%M:%S")
            echo "[$TIMESTAMP] $HOSTNAME ($IP): Estado alterado de $ESTADO_ANTERIOR para $NOVO_ESTADO" >> "$ARQUIVO_LOG_MUDANCA"

            if [ "$notifica" = "sim" ]; then
                TITULO=""
                MENSAGEM=""
                if [ "$NOVO_ESTADO" = "OK" ]; then
                    TITULO="Recuperação: $HOSTNAME ($IP) voltou a ficar ativo"
                    MENSAGEM="Host $HOSTNAME ($IP) voltou a ficar ativo.

"
                else
                    TITULO="Alerta: $HOSTNAME ($IP) está Inacessível"
                    MENSAGEM="Host $HOSTNAME ($IP) está inacessível.

"
                fi

                # Usa quebras de linha adequadas em vez de \n literais
                MENSAGEM+="Detalhes do teste:
- Data e hora de início: $(date '+%F') $HORARIO_INICIO
- Data e hora de término: $(date '+%F') $HORARIO_FIM
- Quantidade de tentativas: $NUM_TENTATIVAS
- Quantidade de tentativas realizadas até sucesso: $((NUM_TENTATIVAS - FALHAS))
- Quantidade limite pra considerar falha: $PERCENTUAL_FALHA_CRITICO%
- Endereço testado: $IP
- Teste executado por: $(hostname)
- IP do Host que realizou o teste: $(hostname -I | awk '{print $1}')"

                # Envia email com o conteúdo apropriado (com quebras de linha reais)
                zz_mail "$EMAIL_DESTINO" "$TITULO" "$MENSAGEM"
            fi
        fi
    } > "$SAIDA_TMP"
}

# Executa os testes em paralelo
while IFS=',' read -r HOSTNAME IP; do
    # Ignora linhas em branco ou comentários
    [[ -z "$HOSTNAME" || "$HOSTNAME" =~ ^[[:space:]]*# ]] && continue
    monitorar_host "$HOSTNAME" "$IP" &
done < "$ARQUIVO_HOSTS"

# Aguarda todos terminarem
wait

# Exibe e grava a saída organizada
for TMP in saida_*.txt; do
    if [ "$MODO_SILENCIOSO" -eq 0 ]; then
        cat "$TMP" | tee -a "$ARQUIVO_SAIDA"
    else
        cat "$TMP" >> "$ARQUIVO_SAIDA"
    fi
done

# Remove arquivos temporários
rm -f saida_*.txt
